generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Add role enum type
enum UserRole {
  USER
  ADMIN
}

// Add campaign status enum type
enum CampaignStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE  // When built after approval
}

// Add campaign type enum
enum CampaignType {
  STANDARD
  MODEL
  PRODUCT
  MERGED
}

model users {
  id                     Int       @id @default(autoincrement())
  username               String    @db.VarChar(255)
  email                  String    @unique @db.VarChar(255)
  password               String
  role                   UserRole  @default(USER)
  is_verified            Boolean   @default(false)
  credits                Int       @default(0)
  subscription_plan      String?
  subscription_start_date DateTime?
  subscription_end_date  DateTime?
  last_login             DateTime? @default(now()) @db.Timestamp(6)
  created_at             DateTime  @default(now())
  updated_at             DateTime  @default(now())
  refresh_tokens         refresh_tokens[]
  campaigns              campaigns[]
  credit_transactions    credit_transactions[]
}

model campaigns {
  id                   Int               @id @default(autoincrement())
  name                 String            @db.VarChar(255)
  description          String
  model_name           String            @db.VarChar(255)
  image_url            String
  created_at           DateTime          @default(now()) @db.Timestamp(6)
  updated_at           DateTime          @default(now()) @db.Timestamp(6)
  user_id              Int
  user                 users             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  selected_models      String?
  status               CampaignStatus    @default(PENDING)
  admin_notes          String?
  admin_id             Int?
  is_built             Boolean?          @default(false)
  build_date           DateTime?         @db.Timestamp(6)
  campaign_images      campaign_images[]
  // New fields for campaign types
  campaign_type        CampaignType      @default(STANDARD)
  is_model_campaign    Boolean           @default(false)
  is_product_campaign  Boolean           @default(false)
  // Fields for merged campaigns
  merged_campaign_id   Int?              // ID of the resulting merged campaign if this is a source campaign
  source_campaign_ids  String?           // Comma-separated IDs of source campaigns if this is a merged campaign
  merge_status         String?           // "pending", "completed", "failed"
  merge_date           DateTime?         @db.Timestamp(6)

  @@index([user_id], name: "idx_campaigns_user_id")
  @@index([status], name: "idx_campaigns_status")
}

model campaign_images {
  id          Int       @id @default(autoincrement())
  campaign_id Int
  url         String
  title       String    @default("Untitled") @db.VarChar(255)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  campaigns   campaigns @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([campaign_id], map: "idx_campaign_images_campaign_id")
}

model refresh_tokens {
  id            Int       @id @default(autoincrement())
  user_id       Int
  token         String    @unique
  expires_at    DateTime
  created_at    DateTime  @default(now())
  user          users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model credit_transactions {
  id               Int       @id @default(autoincrement())
  user_id          Int
  user             users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  amount           Int       // Positive for additions, negative for deductions
  description      String
  created_at       DateTime  @default(now())
  payment_id       String?   // Optional reference to a payment ID (e.g., from Stripe)
  transaction_type String    // "payment", "usage", "bonus", etc.
  admin_id         Int?      // ID of admin who initiated the transaction (if applicable)
}